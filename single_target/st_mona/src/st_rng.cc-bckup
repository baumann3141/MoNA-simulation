/** \file
 * Random number generator stuff (implementation)
 */
#include <time.h>
#include <iostream>
#include <fstream>
#include <string>
#include <math.h>
#include <gsl/gsl_sf_bessel.h>
#include <gsl/gsl_histogram.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include "st_histo_tuple.hh"
#include "st_rng.hh"
#include "TGraph.h"
#include "TMath.h"

using namespace std;

StGSLrng::StGSLrng() {
  gsl_rng_env_setup();
  fT = gsl_rng_default;
  fR = gsl_rng_alloc (fT);
 }

StGSLrng::~StGSLrng() {
  gsl_rng_free(fR);
 }


double StRNG::value(double l, double u) {  // this makes a cut in the distribution
  if (l>=u) ERR("l>=u: %f %f",l,u);
  double v;
  do v = value(); while (v < l || v > u);
  return v;
}

// ######################################################

StRNGGaussGSL::StRNGGaussGSL(StGSLrng* rr, double c, double s) : fR(rr) {
  fCentroid=c; 
  fSigma=s;
}
double StRNGGaussGSL::value () {
  if (fSigma == 0) return fCentroid;
  return fCentroid + gsl_ran_gaussian(fR->getr(),fSigma);
}

// ######################################################

StRNGExpGSL::StRNGExpGSL(StGSLrng* rr, double c) : fR(rr) {
  fCentroid=c; 
}
double StRNGExpGSL::value () {
  return gsl_ran_exponential(fR->getr(),fCentroid);
}

// ######################################################
StRNGCustombwGSL::StRNGCustombwGSL(gsl_histogram_pdf* hh, StGSLrng* rr, double c, double s) : fR(rr) {
  fCentroid=c; 
  fSigma=s;
  fP = hh;
}
double StRNGCustombwGSL::value () {
   double RanNum =  gsl_ran_flat(fR->getr(),0,1);
   double Val = gsl_histogram_pdf_sample (fP,RanNum);
  
  return Val; 
}

// ######################################################
StRNGLaplaceGSL::StRNGLaplaceGSL(StGSLrng* rr, double c, double s) : fR(rr) {
  fCentroid=c; 
  fSigma=s;
}
double StRNGLaplaceGSL::value () {
  if (fSigma == 0) return fCentroid;
  return fCentroid + gsl_ran_laplace(fR->getr(),fSigma);
}

// ####DOUBLE LAPLACIAN RNG FOR MONA RESOLUTION##########
//Create an instance of the DoubleLaplaceRNG Class that takes in an StGSLrng*,
// two centroids,two sigmas, and a percentage that chooses how much of the total area 
// should belong to each Laplacian.

StRNGDoubleLaplaceGSL::StRNGDoubleLaplaceGSL( StGSLrng* rr, double c1, double s1, double c2, double s2, double p) : fR(rr) {
   fCentroid1=c1; 
   fSigma1=s1;
   fCentroid2=c2; 
   fSigma2=s2;
   Prcnt=p;
}


  // make a call to a uniform gsl RNG to get a random number between 0 and 1 that "chooses"
  // which Laplacian to generate (based on whether the uniform random number is > or < the
  // "Prcnt" variable. Then make a call to a laplacian RNG to output a laplacian with the 
  // correct width and centroid:

double StRNGDoubleLaplaceGSL::value () {
  if (gsl_rng_uniform(fR->getr()) <= Prcnt) return fCentroid1 + gsl_ran_laplace(fR->getr(), fSigma1);

                                           // ^^^ return a laplacian with Sigma1 and Centroid1 if 
                                           // ^^^ uniform RNG <= Prcnt.

                                            return fCentroid2 + gsl_ran_laplace(fR->getr(), fSigma2);
                                           
					   // ^^^ Otherwise return a laplacian with Sigma2 & Centroid 2.
}

// ######################################################
StRNGCauchyGSL::StRNGCauchyGSL(StGSLrng* rr, double c, double s) : fR(rr) {
  fCentroid=c; 
  fSigma=s;
}
double StRNGCauchyGSL::value () {
  if (fSigma == 0) return fCentroid;
  return fCentroid + gsl_ran_cauchy(fR->getr(),fSigma);
}

// ######################################################
StRNGGammaGSL::StRNGGammaGSL(StGSLrng* rr, double a, double b) : fR(rr) {
  fA = a; 
  fB = b;
}
double StRNGGammaGSL::value () {
  double v;
  v = gsl_ran_gamma(fR->getr(), fA, fB);
  return v;
}

// ######################################################
StRNGUniformGSL::StRNGUniformGSL(StGSLrng* rr, double l, double u) : fR(rr) {
  fLower=l;
  fUpper=u;
}
double StRNGUniformGSL::value () {return value(fLower, fUpper);}
double StRNGUniformGSL::value (double l, double u) {
  return gsl_ran_flat(fR->getr(), l, u);
}

// ######################################################
StRNGCos_twoneutronGSL::StRNGCos_twoneutronGSL(StGSLrng* rr, double l, double u) : fR(rr) {
  fLower=l;
  fUpper=u;
}
double StRNGCos_twoneutronGSL::value () {return value(fLower, fUpper);}
double StRNGCos_twoneutronGSL::value (double l, double u) {
  return acos(gsl_ran_flat(fR->getr(), -1, 1))/M_PI;
}

// ######################################################
StRNGCustomE1::StRNGCustomE1(StGSLrng* rr, double l, double u) : fR(rr) {
  fLower=l;
  fUpper=u;
}
double StRNGCustomE1::value () {return value(fLower, fUpper);}
double StRNGCustomE1::value (double l, double u) {
  //

  //initialize the Custom function to 0.001
  for(int i=0; i < 100; i++)  fx[i] = 0.01;

  // set fx[i] to percent of maximum in 0.1 MeV bins 
  // (first bin is from 0.0 to 0.1)

  fx[0]=0.336338647;
  fx[1]=0.823705908;
  fx[2]=0.987367259;
  fx[3]=0.959218814;
  fx[4]=0.862574514;
  fx[5]=0.750994173;
  fx[6]=0.645079573;
  fx[7]=0.551543708;
  fx[8]=0.471493392;
  fx[9]=0.403929981;
  fx[10]=0.34720906;
  fx[11]=0.299629118;
  fx[12]=0.259650721;
  fx[13]=0.225957302;
  fx[14]=0.197453608;
  fx[15]=0.173240417;
  fx[16]=0.152583766;
  fx[17]=0.134885543;
  fx[18]=0.119657541;
  fx[19]=0.095088893;
  fx[20]=0.08515252;
  fx[21]=0.076468968;
  fx[22]=0.068853947;
  fx[23]=0.062153739;
  fx[24]=0.056239816;
  fx[25]=0.05100419;
  fx[26]=0.046355585;
  fx[27]=0.042216815;
  fx[28]=0.03852242;
  fx[29]=0.035216471;
  fx[30]=0.032251026;
  fx[31]=0.029584998;
  fx[32]=0.027182951;
  fx[33]=0.02501425;
  fx[34]=0.023052345;
  fx[35]=0.021274113;
  fx[36]=0.019659431;
  fx[37]=0.018190718;
  fx[38]=0.016852532;
  fx[39]=0.015631296;
  fx[40]=0.014515074;
  fx[41]=0.013493328;

  /*
    values of calculated virtual photon E1 excitation for 11Be on Au target
    in 0.1 MeV bins from 0.504 Sn
0.336338647 0.823705908 0.987367259 0.959218814 0.862574514 0.750994173 0.645079573
0.551543708 0.471493392 0.403929981 0.347209061 0.299629118 0.259650721 0.225957302
0.197453608 0.173240417 0.152583766 0.134885543 0.119657541 0.106500832 0.095088893
0.08515252 0.076468968 0.068853947 0.062153739 0.056239816 0.05100419 0.046355585
0.042216815 0.03852242 0.035216471 0.032251026 0.029584998 0.027182951 0.02501425
0.023052345 0.021274113 0.019659431 0.018190718 0.016852532 0.015631296 0.014515074
0.013493328 0.012556712 0.01169695 0.010906704 0.010179425 0.009509272 0.008891018

  */

  do {
    //get energy value
    x =  gsl_ran_flat(fR->getr(), l, u);
    xe = x*10.0;
    // convert to integer value for array
    xi = (int) xe;
    // get probability value
    y = gsl_ran_flat(fR->getr(), 0.0, 1.0);
    //  ERR("x and y and fx and xi and xe: %f %f %f %i %f ",x,y,fx[xi],xi,xe);
    // if probability is less than value for array of function, keep trying with new x,y
  } while (y > fx[xi]);
  
  // output original x
  v=( xe / 10.0);
  return v;
  
}

// ######################################################

StRNGAsymmetricBWGSL::StRNGAsymmetricBWGSL(StGSLrng* rr, double par1, double par2,int par3,int par4,int par5) : fR(rr) {

    Ezero = par1;
    Width = par2;
    angMom = par3;
    fragMass = par4;
    flagGamma = par5;

    int n=1000000; // Number of bins, no particular reason for 100000
    double a=0.0;  //Lower limit in MeV, can be expanded if need be  
    double b=10.0; //Upper limit in MeV, can be expanded if need be

    fH = gsl_histogram_alloc (n); // define histo gram and alloc
    gsl_histogram_set_ranges_uniform (fH, a, b); // set range and bins

    double y[1000001] = {0.0}; // Array to hold function
      
    // Get Constants
    double hBarC = 197.3269631; // MeV fm
    double Nmass = 939.565346; //  MeV
    double amu = 931.494028; // from Nist
    double nucRad = 1.4; // fm from Lane and Thomas pg 266 *1.2*
    double Const = (1.0 /3.14159265 ); // Const for BW        
    double redMass = (((Nmass/amu)*fragMass)/(Nmass/amu + fragMass))*amu; // reduced mass from lane in amu
    double k = sqrt(2.0 * redMass) / hBarC; // k in terms of sqrt(Energy)
    double Radius = nucRad * (pow(fragMass,1.0/3.0) + pow(Nmass/amu, 1.0/3.0)); // Nuclear Radius (A1^(1/3) + A2^(1/3)) 
    // Create the BW function //    
    for(int i=1; i < 1000001; i++) {
      double En=i*0.00001; // Convert bins to energy in MeV
      double x = k*Radius*sqrt(En); // X = k*R with energy included
      double x0 = k*Radius*sqrt(Ezero);
     
      //Call functions for Penetribility
      double jl = x * gsl_sf_bessel_jl (angMom,x); // Regular Spherical Bessel * x
      double nl = x * gsl_sf_bessel_yl (angMom,x); // Irregular Spherical Bessel * x
      double PenL = x / (nl*nl + jl*jl); // Penetrability as a function of E,W,L

      //Functions with the resonance enrgy inputed
      double jl0 = x0 * gsl_sf_bessel_jl (angMom,x0); // Regular Spherical Bessel * x
      double nl0 = x0 * gsl_sf_bessel_yl (angMom,x0); // Irregular Spherical Bessel * x
      double PenL0 = x0 / (nl0*nl0 + jl0*jl0); // Penetrability as a function of E,W,L
 
      double bound = 0; // Define the boundary condition
      double shift = 0; // Difine the shift function
     
      if(angMom == 1) { //
      shift = - 1 / ( 1 + pow(x,2)); // From lane and thomas, i.e. x*(F'*F+G'*G)/(F*F+G*G)
      bound = -1/ ( 1 + pow(x0,2)); // Set boudary so shift = 0 at eigen value (i.e. Decay energy)
      }

      if(angMom == 2) { // Same as above for l = 2
	shift = -3*(pow(x,2)+6)/(pow(x,4)+9+3*pow(x,2));
	bound = -3*(pow(x0,2)+6)/(pow(x0,4)+9+3*pow(x0,2));  
      }

      double redGamma = 0.0;
      double delta = 0.0;
      double Gamma = 0.0;
      double obsGamma = 0.0;

      if(flagGamma == 1) {  // For use with Gflag - reduced width
       	 redGamma = Width;
	 delta = -( shift - bound ) * redGamma * redGamma; // Full shift function
	 Gamma = 2.0 * redGamma * redGamma * PenL; // Width 
      } else if (flagGamma == 0){ // default --observed width CRH 5/12/08
	obsGamma = Width;
	delta = - ( shift - bound)* (obsGamma / (2 * PenL0)); 
	Gamma = (obsGamma / PenL0)*PenL;
      }
      
      double BW = Const * ( (Gamma / 2.0) / ((Ezero + delta - En)*(Ezero + delta - En) + (Gamma*Gamma) / 4.0));
      // Full BW with shift and pen functions included pg 322 Lane and Thomas 

      y[i]=BW; // Add value to array
      gsl_histogram_accumulate (fH,En,y[i]); // add value to histogram
    }
   
    // Create PDF from histogram
    fP = gsl_histogram_pdf_alloc (n); // init PDF
    gsl_histogram_pdf_init (fP,fH); // Make pdf with histogram dist.

    gsl_histogram_free(fH); // free histogram ... tried to free pdf but didnt work CRH

}
//double StRNGAsymmetricBWGSL::value () {return value(fLower, fUpper);}
//double StRNGAsymmetricBWGSL::value (double l, double u) {
double StRNGAsymmetricBWGSL::value () {
   double RanNum =  gsl_ran_flat(fR->getr(),0,1);
   double Val = gsl_histogram_pdf_sample (fP,RanNum);
  
  return Val; 
}

// ######################################################
StRNGEtotal_11LiGSL::StRNGEtotal_11LiGSL(StGSLrng* rr, double par1) : fR(rr) {

    Eb = par1;

    int n=5000000; // Number of bins, no particular reason for 100000
    double a=0.0;  //Lower limit in MeV, can be expanded if need be  
    double b=50.0; //Upper limit in MeV, can be expanded if need be

    fH = gsl_histogram_alloc (n); // define histo gram and alloc
    gsl_histogram_set_ranges_uniform (fH, a, b); // set range and bins

    double y[5000001] = {0.0}; // Array to hold function
      
    // Create the BW function //    
    for(int i=1; i < 5000001; i++) {
      double En=i*0.00001; // Convert bins to energy in MeV      
      double BW = pow(En,2)/pow(2.21*Eb+En,3.5);

      y[i]=BW; // Add value to array
      gsl_histogram_accumulate (fH,En,y[i]); // add value to histogram
    }
   
    // Create PDF from histogram
    fP = gsl_histogram_pdf_alloc (n); // init PDF
    gsl_histogram_pdf_init (fP,fH); // Make pdf with histogram dist.

    gsl_histogram_free(fH); // free histogram ... tried to free pdf but didnt work CRH

}
double StRNGEtotal_11LiGSL::value () {
   double RanNum =  gsl_ran_flat(fR->getr(),0,1);
   double Val = gsl_histogram_pdf_sample (fP,RanNum);
  
  return Val; 
}

// ######################################################
StRNGE_12LiGSL::StRNGE_12LiGSL(StGSLrng* rr, double par1) : fR(rr) {

    Eb = par1;

    int n=5000000; // Number of bins, no particular reason for 100000
    double a=0.0;  //Lower limit in MeV, can be expanded if need be  
    double b=50.0; //Upper limit in MeV, can be expanded if need be

    fH = gsl_histogram_alloc (n); // define histo gram and alloc
    gsl_histogram_set_ranges_uniform (fH, a, b); // set range and bins

    double y[5000001] = {0.0}; // Array to hold function
      
    // Create the BW function //    
    for(int i=1; i < 5000001; i++) {
      double En=i*0.00001; // Convert bins to energy in MeV      
      double BW = pow(En,0.5)/pow(1.69*Eb+En,2);

      y[i]=BW; // Add value to array
      gsl_histogram_accumulate (fH,En,y[i]); // add value to histogram
    }
   
    // Create PDF from histogram
    fP = gsl_histogram_pdf_alloc (n); // init PDF
    gsl_histogram_pdf_init (fP,fH); // Make pdf with histogram dist.

    gsl_histogram_free(fH); // free histogram ... tried to free pdf but didnt work CRH

}
double StRNGE_12LiGSL::value () {
   double RanNum =  gsl_ran_flat(fR->getr(),0,1);
   double Val = gsl_histogram_pdf_sample (fP,RanNum);
  
  return Val; 
}

// ######################################################

StRNGTwoNeutron_seqGSL::StRNGTwoNeutron_seqGSL(StGSLrng* rr, double par1, double par2,double par3,double par4,double par5,int par6,int beamA,int nNeut, int nProt) : fR(rr) {

    n=100000; // Number of bins, no particular reason for 100000
    fH = gsl_histogram_alloc (n); // define histo gram and alloc
    fP = gsl_histogram_pdf_alloc (n); // init PDF

    nlines = 0;
    Q2N = par1;
    WidthTotal = par2;
    Width1 = par3;
    Q1N = par4;
    Width2 = par5;
    AngMom = par6;
    fragMass = beamA - nNeut - nProt - 2; //Final fragment A
    SF1 = 1; //Spectroscopic factor for first neutron decay
    SF2 = 1; //Spectoscopic factor for second neutron decay
    hBarC = 197.3269631; // MeV fm
    Nmass = 939.565346; //  MeV
    amu = 931.494028; // from Nist
    nucRad = 1.4; // fm from Lane and Thomas pg 266 *1.2*
    redMass1 = (((Nmass/amu)*(fragMass+1))/(Nmass/amu + (fragMass+1)))*amu; // reduced mass from lane in amu
    redMass2 = (((Nmass/amu)*fragMass)/(Nmass/amu + fragMass))*amu; // reduced mass from lane in amu
    k1 = sqrt(2.0 * redMass1) / hBarC; // k in terms of sqrt(Energy)
    k2 = sqrt(2.0 * redMass2) / hBarC; // k in terms of sqrt(Energy)
    Radius1 = nucRad * (pow(fragMass+1,1.0/3.0) + pow(Nmass/amu, 1.0/3.0)); // Nuclear Radius (A1^(1/3) + A2^(1/3)) 
    Radius2 = nucRad * (pow(fragMass,1.0/3.0) + pow(Nmass/amu, 1.0/3.0)); // Nuclear Radius (A1^(1/3) + A2^(1/3)) 

    double En = Q2N; 
    double IntSum = 0;

          for(int m=1; m < 10001; m++) {

	    double UmA=m*0.001; // Convert bins to energy in MeV
	    double UmB=(m+1)*0.001; // Convert bins to energy in MeV

	    if (En - UmB > 0){
	      double y1A = k1*Radius1*sqrt(En-UmA); // X = k*R with energy included
	      double jl1A = y1A * gsl_sf_bessel_jl (AngMom,y1A); // Regular Spherical Bessel * x
	      double nl1A = y1A * gsl_sf_bessel_yl (AngMom,y1A); // Irregular Spherical Bessel * x
	      double PenL1A = y1A / (nl1A*nl1A + jl1A*jl1A); // Penetrability as a function of E,W,L 
     
	      double y2A = k2*Radius2*sqrt(UmA); // X = k*R with energy included
	      double jl2A = y2A * gsl_sf_bessel_jl (AngMom,y2A); // Regular Spherical Bessel * x
	      double nl2A = y2A * gsl_sf_bessel_yl (AngMom,y2A); // Irregular Spherical Bessel * x
	      double PenL2A = y2A / (nl2A*nl2A + jl2A*jl2A); // Penetrability as a function of E,W,L

	      double y1B = k1*Radius1*sqrt(En-UmB); // X = k*R with energy included
	      double jl1B = y1B * gsl_sf_bessel_jl (AngMom,y1B); // Regular Spherical Bessel * x
	      double nl1B = y1B * gsl_sf_bessel_yl (AngMom,y1B); // Irregular Spherical Bessel * x
	      double PenL1B = y1B / (nl1B*nl1B + jl1B*jl1B); // Penetrability as a function of E,W,L 

	      double y2B = k2*Radius2*sqrt(UmB); // X = k*R with energy included
	      double jl2B = y2B * gsl_sf_bessel_jl (AngMom,y2B); // Regular Spherical Bessel * x
	      double nl2B = y2B * gsl_sf_bessel_yl (AngMom,y2B); // Irregular Spherical Bessel * x
	      double PenL2B = y2B / (nl2B*nl2B + jl2B*jl2B); // Penetrability as a function of E,W,L

              double functionatA = PenL1A*PenL2A/(pow(UmA-Q1N,2)+pow(Width2,4)*pow(SF2,4)*pow(PenL2A,2));
	      double functionatB = PenL1B*PenL2B/(pow(UmB-Q1N,2)+pow(Width2,4)*pow(SF2,4)*pow(PenL2B,2));
	      IntSum = IntSum + .0005*(functionatA + functionatB);
	    } 

	  }

	  double NormalizeInt = WidthTotal/IntSum;

    for(int n=1; n < 10001; n++) {

      double En=n*0.001; // Convert bins to energy in MeV
      double IntSum=0;

          for(int m=1; m < 10001; m++) {

	    double UmA=m*0.001; // Convert bins to energy in MeV
	    double UmB=(m+1)*0.001; // Convert bins to energy in MeV

	    if (En - UmB > 0){
	      double y1A = k1*Radius1*sqrt(En-UmA); // X = k*R with energy included
	      double jl1A = y1A * gsl_sf_bessel_jl (AngMom,y1A); // Regular Spherical Bessel * x
	      double nl1A = y1A * gsl_sf_bessel_yl (AngMom,y1A); // Irregular Spherical Bessel * x
	      double PenL1A = y1A / (nl1A*nl1A + jl1A*jl1A); // Penetrability as a function of E,W,L 
     
	      double y2A = k2*Radius2*sqrt(UmA); // X = k*R with energy included
	      double jl2A = y2A * gsl_sf_bessel_jl (AngMom,y2A); // Regular Spherical Bessel * x
	      double nl2A = y2A * gsl_sf_bessel_yl (AngMom,y2A); // Irregular Spherical Bessel * x
	      double PenL2A = y2A / (nl2A*nl2A + jl2A*jl2A); // Penetrability as a function of E,W,L

	      double y1B = k1*Radius1*sqrt(En-UmB); // X = k*R with energy included
	      double jl1B = y1B * gsl_sf_bessel_jl (AngMom,y1B); // Regular Spherical Bessel * x
	      double nl1B = y1B * gsl_sf_bessel_yl (AngMom,y1B); // Irregular Spherical Bessel * x
	      double PenL1B = y1B / (nl1B*nl1B + jl1B*jl1B); // Penetrability as a function of E,W,L 

	      double y2B = k2*Radius2*sqrt(UmB); // X = k*R with energy included
	      double jl2B = y2B * gsl_sf_bessel_jl (AngMom,y2B); // Regular Spherical Bessel * x
	      double nl2B = y2B * gsl_sf_bessel_yl (AngMom,y2B); // Irregular Spherical Bessel * x
	      double PenL2B = y2B / (nl2B*nl2B + jl2B*jl2B); // Penetrability as a function of E,W,L

	      double functionatA = PenL1A*PenL2A/(pow(UmA-Q1N,2)+pow(Width2,4)*pow(SF2,4)*pow(PenL2A,2));
	      double functionatB = PenL1B*PenL2B/(pow(UmB-Q1N,2)+pow(Width2,4)*pow(SF2,4)*pow(PenL2B,2));
	      IntSum = IntSum + .0005*(functionatA + functionatB);

	    } 
	  }

	  x[n]= IntSum*NormalizeInt; // Add value to array
    }

}
double StRNGTwoNeutron_seqGSL::value () {return value(fLower, fUpper);}
double StRNGTwoNeutron_seqGSL::value (double l, double u) {

    // Create histogram to be filled with distribution
    double a=0.0,b=10.0; //Range in MeV, can be expanded if need be  
    gsl_histogram_set_ranges_uniform (fH, a, b); // set range and bins
    double y[10001] = {0.0}; // Array to hold function
      
    // Create the Two Neutron function //    
    for(int i=1; i < 10001; i++) {
      double En=i*0.001; // Convert bins to energy in MeV

      if (En - u > 0){

      double y1 = k1*Radius1*sqrt(En-u); // X = k*R with energy included
      double jl1 = y1 * gsl_sf_bessel_jl (AngMom,y1); // Regular Spherical Bessel * x
      double nl1 = y1 * gsl_sf_bessel_yl (AngMom,y1); // Irregular Spherical Bessel * x
      double PenL1 = y1 / (nl1*nl1 + jl1*jl1); // Penetrability as a function of E,W,L 

      double y2 = k2*Radius2*sqrt(u); // X = k*R with energy included
      double jl2 = y2 * gsl_sf_bessel_jl (AngMom,y2); // Regular Spherical Bessel * x
      double nl2 = y2 * gsl_sf_bessel_yl (AngMom,y2); // Irregular Spherical Bessel * x
      double PenL2 = y2 / (nl2*nl2 + jl2*jl2); // Penetrability as a function of E,W,L

      double Gamma2 = 2*SF2*SF2*Width2*Width2*PenL2;
      double DS = (1/6.28318531) * Gamma2 / ((Q1N - u)*(Q1N - u ) + Gamma2*Gamma2/4.0); // Density of States
      double Width = x[i];

      double GammaOne = 2*SF1*SF1*Width1*Width1*PenL1*DS;
      double omgplzwork = GammaOne/((Q2N - En)*(Q2N - En) + Width*Width/4.0);

      y[i]=omgplzwork; // Add value to array

      } else {
      y[i]=0; // Add value to array
      }
      gsl_histogram_accumulate (fH,En,y[i]); // add value to histogram
    }
    
    gsl_histogram_pdf_init (fP,fH); // Make pdf with histogram dist.   

    double RanNum =  gsl_ran_flat(fR->getr(),0,1);
    double Val = gsl_histogram_pdf_sample (fP,RanNum);

  return Val; 
}

// ######################################################
//---------------Start of Volya 2n Seq decay--------------------------------------
StRNGVolya_2nseqGSL::StRNGVolya_2nseqGSL(StGSLrng* rr, double par1, double par2,double par3,double par4,int par6,int fragA) : fR(rr) {

  int n=100000; // Number of bins, no particular reason for 100000
  fH = gsl_histogram_alloc (n); // define histo gram and alloc
  fP = gsl_histogram_pdf_alloc (n); // init PDF
  double maxbin = 10;
  gsl_histogram_set_ranges_uniform (fH, 0, maxbin); // set range and bins


  //public variable
  InitialStateEnergy = par1;

  //Set Paramaters
  double FragA = fragA - 2; //remove 2 neutrons
  int L = par6;        //angular momentum
  double Ei = par1; //MeV Initial State
  double S = par2;  //MeV Threshold
  double Ev = Ei+S;  //MeV intermediate state
  double sI = par3; //spectroscopic factor for the I->V single particle decay
  double sV = par4; //  ''                         V->F       ''
  printf("Inside StRNGVolya_2nseqGSL: Ei:%f L:%d S:%f sI:%f sV:%f FragA:%f\n",Ei,L,S,sI,sV,FragA);

  if((1.5*Ei) > maxbin) cerr << "\n\nNeed to increase maxbin in StRNGVolya_2nseqGSL\n" << endl;

  int nSteps = 90000;
  double stepsize = Ei / nSteps;
  printf("nSteps:%d  stepsize:%f  Range:0-%f MeV\n\n",nSteps,stepsize,stepsize*nSteps);

  TGraph *g = new TGraph();
  //TGraph *ge = new TGraph();
  //TGraph *gep = new TGraph();
  double sum=0;
  for(int i=0; i<(nSteps-1); i++){
    double Er0 = i*stepsize;  //Relative energy of e and e' (2 neutrons)
    double e0 = 0.5 * (Ei +Er0);
    double ep0 = 0.5 * (Ei-Er0);

    double DecayRate0 = GetDecayRate(L,Ei, S, Ev, Er0, e0, ep0, sI,sV, FragA);

    double Er1 = (i+1)*stepsize;  //Relative energy of e and e' (2 neutrons)
    double e1 = 0.5 * (Ei +Er1);
    double ep1 = 0.5 * (Ei-Er1);

    double DecayRate1 = GetDecayRate(L, Ei, S, Ev, Er1, e1, ep1, sI,sV, FragA);

    //printf("\ni:%d Er0:%f Er1:%f e0:%f ep0:%f e1:%f ep1:%f etot0:%f etot1:%f\n",i,Er0,Er1,e0,ep0,e1,ep1,(e0+ep0),(e1+ep1));
    //printf("   DecayRate0:%f  DecayRate1:%f  dEr:%f dDecayRate:%f\n",DecayRate0,DecayRate1,Er1-Er0,DecayRate1-DecayRate0);

    g->SetPoint(i,0.5*(Er1+Er0), (Er1-Er0)*(DecayRate1+DecayRate0));
    //ge->SetPoint(i,0.5*(e1+e0), (Er1-Er0)*(DecayRate1+DecayRate0));
    //gep->SetPoint(i,0.5*(ep1+ep0), (Er1-Er0)*(DecayRate1+DecayRate0));
    sum = sum + (Er1-Er0)*(DecayRate1+DecayRate0);
  }

  //Normalize the distribution to area=1
  for(int p=0; p<g->GetN(); p++){
    double x, y;
    g->GetPoint(p,x,y);

    gsl_histogram_accumulate (fH,x,y/sum); // add value to histogram
  }
  g->Delete();
    
  //prob. distribution for relative energy (e-e') of the 2 neutrons.
  gsl_histogram_pdf_init (fP,fH); // Make pdf with histogram dist.   
  
}


//__________________________________________________________________________________
double StRNGVolya_2nseqGSL::GetDecayRate(int L, double Ei, double S, double Ev, double Er, double e, double ep, double sI, double sV, double fragA){

  double DR = 1./(8*TMath::Pi());
  DR = DR * SPDW(e,L,fragA,1) * SPDW(ep,L,fragA,0);

  double A = Ei+2*S;
  double B = 0.5 * ( Gamma(e,L,fragA,1,sV) + Gamma(ep,L,fragA,0,sV) );

  //Numerator is now A - iB

  double C = S + e;
  double D = 0.5 * Gamma(e,L,fragA,1,sV);

  double X = S + ep;
  double Y = 0.5 * Gamma(ep,L,fragA,0,sV);

  //Denominator is now [C-iD] [X-iY]
  //Complex Modulus gives:
  //            sqrt(A^2 + B^2)
  //       -------------------------
  //       sqrt(C^2+D^2)*sqrt(X^2+Y^2)
  //
  //and then square everything and remove the sqrts

  double modsq = (A*A + B*B) / ( (C*C + D*D) * (X*X + Y*Y) );

  DR = DR * modsq;

  DR = DR * sI * sV;

  return DR;
}

double StRNGVolya_2nseqGSL::Gamma(double ee, int L, double fragA, int add, double S){

  double gamma = SPDW(ee,L,fragA,add) * S;

  return gamma;
}


//____Single Particle Decay Width_______________
double StRNGVolya_2nseqGSL::SPDW(double ee, int L, double fragA, int add){

  //TODO: should have 2 reduced masses? for fragA and fragA+1
  double redMass = 931.494 * ((1.008 * (fragA+add)) / (1.008 + (fragA+add)));  //MeV/c2
  double hbarC = 197.3269; //MeV fm
  double R = 1.4 * (TMath::Power(1.008, 1./3.)+TMath::Power(fragA+add,1./3.)); //fm

  double k = TMath::Sqrt(2*redMass*ee) / hbarC;

  double spdw = 2*hbarC*hbarC / (redMass*R*R);

  spdw = spdw * k * R * TMath::Abs( (2.*L-1.)/(2.*L+1.) );

  double transProb = 0;
  if(L==0) transProb = 1;
  else if(L==1) transProb = TMath::Power(k*R, 2.0) / (1 + TMath::Power(k*R, 2.0));
  else if(L==2) transProb = TMath::Power(k*R, 4.0) / (9 + 3*TMath::Power(k*R,2.0) + TMath::Power(k*R, 4.0));
  else cerr << "Values of L=0,1,2 are only accepted at this time." << endl;
  
  spdw = spdw * transProb;
  
  return spdw;
}



double StRNGVolya_2nseqGSL::value () {return value(fLower, fUpper);}
double StRNGVolya_2nseqGSL::value (double l, double u) {

    double RanNum =  gsl_ran_flat(fR->getr(),0,1);
    double Val = gsl_histogram_pdf_sample (fP,RanNum);

  return Val; 
}
//-------------------------------End of Volya 2n Seq. decay--------------------------------------------


//added by SMM on 10/16/06 for custom excitation energy lineshape
  StRNGCustomGSL::StRNGCustomGSL(StGSLrng* rr, std::string fnme) : fR(rr) {
    fname = fnme;
  }

  double StRNGCustomGSL::value() {

	  std::ifstream in;
  in.open(fname.c_str());

  //find number of lines in the file (nlines)
  int nlines = 0;
  double temp; //dummy variable 
  while(1) {
    in >> temp >> temp;
    if (!in.good()) break;
    nlines++;
  }
 // std::cout << "My number of lines is " << nlines << "\n";

  //"reset" the file
  in.clear();
  in.seekg(0);

  int nbins = nlines; //start thinking in terms of bins

  //create array of  and y variables with nbins positions
  double xxx[nbins], yyy[nbins];

  //read in x and y values and put them into an array.  
  int line=0;
  while(line < nlines) {
    in >> xxx[line] >> yyy[line];
    //std::cout << "My current line is " << line << "\n";
    //std::cout << "My x and y vals are: " << xxx[line] << " " << yyy[line] << "\n";
    if (!in.good()) break;
  line++;
  }

  // done with the datfile, close it
  in.close();



  //convert x values into left and right edges of the bin.
  double ysum = 0;
  double xlo[nbins], xhi[nbins], prcnt[nbins], ynorm[nbins];
  double lodiff, hidiff;
  for(int i=1; i<(nbins-1); i++) {

    lodiff = (xxx[i] - xxx[i-1]); //get difference between
    hidiff = (xxx[i+1] - xxx[i]); //bins below & above

    xlo[i] = xxx[i]-(lodiff/2); //set bin edges equal to
    xhi[i] = xxx[i]+(hidiff/2); //center +/- difference / 2

    ysum += yyy[i]; //while we're at it get a sum of y bins
    prcnt[i]=0;     //and set all prcnt[i] values to 0.
  }

  //set first and last bins manually
  xlo[0] = xxx[0];
  xhi[0] = xlo[1];
  xlo[nbins-1] = xhi[nbins-2];
  xhi[nbins-1] = xxx[nbins-1];

  //add in the first and last bins to ysum
  ysum += yyy[0];
  ysum += yyy[nbins-1];


  for (int i=0; i<nbins; i++) {
    
    //normalize y values
    ynorm[i] = yyy[i]/ysum;
    
    //set prcnt[i] to normalized y-value 
    //plus all others before it
    for (int j=0; j<=i ; j++) {
      prcnt[i]+=ynorm[j];
    }
  }

  
 //  for(int i=0; i<nbins; i++) {
//     for (int j=0; j<=i ; j++) {
//       prcnt[i]+=ynorm[j];
//     }
//   }
  

   //rng from 0 to 1 to select which bin we are in
  double ran_prcnt = gsl_rng_uniform(fR->getr()); 

  int bin = 0;   //variable to denote the bin we fill
  
  if (ran_prcnt == 0) { 
    bin = 0; //if rng returns 0, set bin to bin 0

  } else { //otherwise, set bin to the bin that ran_prcnt falls into

    for (int i=0; i<300; i++) {
      if (ran_prcnt <= prcnt[i] && ran_prcnt > prcnt [i-1]) {
	bin = i;
      } else {}
    }
  }

  //return a random number between the lower and upper edges of the bin
  return gsl_ran_flat(fR->getr(), xlo[bin], xhi[bin]);

}
