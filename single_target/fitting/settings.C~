#include<vector>
	//user settings
	const int files = 2; // number of paths to include
	int paths[files] = {3,4}; //path numbers
	const int ndf = 4; // number of degrees of freedom (scales, energies, widths). used for calculating proper 1\sigma limit in fit2dHist.C
	const int maxparam = 3; // maximum number of parameters allows arrays of vectors to be declared
	const char* datafile = "12B_9li_data_hsts.root"; // data histogram ROOT file
	vector<int> comps[3];
	bool asymErrors = kFALSE;
	// this lets us look at the errors up to an arbitrary chi^2 limit, chi2limit
	// if you just want 1 sigma errors, set chi2limit to zero.
	double chi2limit = 0; // absolute limit that you want your errors to fit to.

	// draw options, for drawing best fit
	int nx = 2; // TCanvas divisions in the x-direction
	int ny = 2; // TCanvas divisions in the y-direction
	int numplots = 2; //how many plots you want to display (should be less than nx*ny, but does not have to be less than or equal to number of plots you are actually fitting)
	int px = maxparam; // TCanvas divisions in the x-direction to display chi^2 plots.
	int py = files; // TCanvas divisions in the y-direction to display chi^2 plots.

	// global variable needed for fit2dHist.C
	const int components = files;

vector<int> allstates[19]; // array of vectors. each vector lists the state parameters (defined in the decay_paths PP) for that path
vector<int> states[files]; // same array, but only for the paths included in this minimization

void apply_states()
{
	allstates[0].push_back(0);
	allstates[1].push_back(1); allstates[1].push_back(2);
	allstates[2].push_back(3); allstates[2].push_back(4);
	allstates[3].push_back(5); allstates[3].push_back(6);

	for (int i=0;i<files;i++)
	{
		states[i] = allstates[paths[i]-1];
	}
}
