// C++ library includes
// Geant4 library includes
//#include "G4VisAttributes.hh"
//#include "G4Colour.hh"
#include "G4String.hh"
#include "G4ios.hh"
//#include "G4SDManager.hh"
#include "globals.hh"
#include "G4Element.hh"
#include "G4Material.hh"
#include "G4Box.hh"
//#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4PVPlacement.hh"
//#include "G4SubtractionSolid.hh"

//#include "G4UnitsTable.hh"
// My file includes
#include "DetectorConstruction.hh"
#include "TrackerSD.hh"


DetectorConstruction::DetectorConstruction()
{
    detectorInfo.clear();
    physVols.clear();
}

DetectorConstruction::~DetectorConstruction()
{;}


G4VPhysicalVolume* DetectorConstruction::Construct()
{
    //G4UnitDefinition::BuildUnitsTable();
    //G4cout << "beginngin the detectorconstruction\n";
    G4double a;
    G4double z;
    G4double density;
    G4String name, symbol;
    G4int ncomponents;
    G4double fractionmass;

    // This is useful to look at pre-loaded NIST materials
    G4NistManager* NistManager = G4NistManager::Instance();
    G4Material* Air = NistManager->FindOrBuildMaterial("G4_AIR");
    //G4Material* Concrete = NistManager->FindOrBuildMaterial("G4_CONCRETE");

    
    /*
    a = 15.999*g/mole;
    G4Element *elO  = new G4Element(name="Oxygen",  symbol=" O" , z= 8., a);

    a = 14.007*g/mole;
    G4Element* elN  = new G4Element(name="Nitrogen",symbol=" N" , z= 7., a);
    

    //------------Air---------------  
    
    
    density = 1.2927*mg/cm3;
    G4Material *Air = new G4Material(name="Air ",density,ncomponents=2);
    Air->AddElement(elO, fractionmass=30.0*perCent);
    Air->AddElement(elN, fractionmass=70.0*perCent);
    */
    
    

    //------------------------------ world volume

    //G4cout << "makeing world\n";
    G4double WorldLength = 30.0*m;
    G4double HalfWorldLength = WorldLength*0.5;
    G4double WorldWidth = 12.0*m;
    G4double HalfWorldWidth = WorldWidth*0.5;
    G4double WorldHeight = 6.0*m;
    G4double HalfWorldHeight = WorldHeight*0.5;
    G4Box *World_box = new G4Box("World_box",HalfWorldWidth,HalfWorldHeight,HalfWorldLength);

    G4LogicalVolume *World_log = new G4LogicalVolume(World_box,Air,"World_log",0,0,0);

    G4VPhysicalVolume *World_phys = new G4PVPlacement(0,G4ThreeVector(0*m,0*m,0*m),"World", World_log,0,false,0);

    //////////////////////////////
    // Begin Vault Construction //
    //////////////////////////////
    //TODO: do you really want it done here?
    
    /*
    // The big floor
    G4Box* vaultFloorBox = new G4Box("Vault.Floor.Box",4.65*m,0.5*m,10.3*m);

    // The south east corner gets cut if you look at the floorplan
    G4Box* vaultFloorSESBox = new G4Box("Vault.Floor.SESBox",1.0*m,0.51*m,4.925*m); // 1st chunk out
    G4SubtractionSolid* stageOne = new G4SubtractionSolid("Vault.Floor.Stage1",vaultFloorBox,vaultFloorSESBox,G4Transform3D(G4RotationMatrix(),G4ThreeVector(-3.66*m,0.*m,5.375*m)));

    // now for a triangular bit
    G4Trd* vaultFloorSESTriangle = new G4Trd("Vault.Floor.SESTriangle",0.0*m,1.52*m,0.52*m,0.5*m,2.71*m);
    G4RotationMatrix triangleRot;
    triangleRot.rotateZ(180.*deg);
    G4SubtractionSolid* stageTwo = new G4SubtractionSolid("Vault.Floor.Stage2",stageOne,vaultFloorSESTriangle,G4Transform3D(triangleRot,G4ThreeVector(-1.13*m,0.0*m,7.59*m))); //-1.13, 0, 7.59


    G4cout << "thinking about makin the floor\n";
    // Logical Volume + visualization
    G4RotationMatrix* floorRotate = new G4RotationMatrix;
    floorRotate->rotateY(22*deg);
    //G4LogicalVolume* vaultLogFloor = new G4LogicalVolume(vaultFloorSESTriangle,Concrete,"Vault.Floor.Log",0,0,0);
    G4LogicalVolume* vaultLogFloor = new G4LogicalVolume(stageTwo,Concrete,"Vault.Floor.Log",0,0,0);
    G4VisAttributes* vaultFloorAtts = new G4VisAttributes(G4Colour(1., 1., 1.));   //White
    vaultFloorAtts->SetVisibility(true);
    //  vaultFloorAtts->SetForceWireframe(true);
    //vaultFloorAtts->SetForceSolid(true);
    vaultLogFloor->SetVisAttributes(vaultFloorAtts);

    // Physical Placement
    G4PVPlacement* vaultPhys = new G4PVPlacement(floorRotate,G4ThreeVector(0.*m,-1.7446*m,0.*m),vaultLogFloor,"Vault.Floor.Phys",World_log,false,0);
    addPhysVol(vaultPhys);
    */
/** 
    // Temporary Primitive neutron window, taken from hope's sim
    // TODO: make the actual sweeper, perhaps make a way of readily turning it on and off like the detector config file
    G4double natoms;
    a=51.996*g/mole;
    G4Element *elCr  = new G4Element(name="Chromium",symbol="Cr", z=24., a);

    a=55.847*g/mole;
    G4Element *elFe  = new G4Element(name="Iron",symbol="Fe", z=26., a);

    a=58.693*g/mole;
    G4Element *elNi  = new G4Element(name="Nickel",symbol="Ni", z=28., a);

    //------------Stainless steel------------
    density = 8.0*g/cm3;
    G4Material *Steel = new G4Material(name="Steel",density,ncomponents=3);
    Steel->AddElement(elCr,fractionmass=18*perCent);
    Steel->AddElement(elFe,fractionmass=72*perCent);
    Steel->AddElement(elNi,fractionmass=10*perCent);
    //Steel->AddElement(elCr,natoms=8);
    //Steel->AddElement(elFe,natoms=74);
    //Steel->AddElement(elNi,natoms=18);

    G4double halfSteelX=50.0*cm;
    G4double halfSteelY=50.0*cm;
    G4double halfSteelZ=50.0*cm;
    G4double halfHoleX=25.0*cm;//assuming 50 cm in X 
    G4double halfHoleY=9.0*cm;//assuming 18 cm in Y
    G4double halfHoleZ=200.0*cm;// totaly random

    // I have to create 2 volumes and subtract them
    G4Box *StSteel = new G4Box("StSteelvol", halfSteelX, halfSteelY, halfSteelZ);
    G4Box *Hole = new G4Box("StHole", halfHoleX, halfHoleY, halfHoleZ);
    G4SubtractionSolid *nWindow = new G4SubtractionSolid("nWindow", StSteel, Hole);

    G4LogicalVolume *nWindow_log = new G4LogicalVolume(nWindow,Steel,"nWindow_log",0,0,0);


    G4VPhysicalVolume *nWindow_phys = new G4PVPlacement(0,G4ThreeVector(0.0,0.0,80.0*cm), nWindow_log,"nWind", World_log,false,0);
**/

 
    G4double natoms;

    a=1.0079*g/mole;
    G4Element *elH = new G4Element(name="Hydrogen",symbol="H",z=1.,a);

    a=12.0107*g/mole;
    G4Element *elC = new G4Element(name="Carbon",symbol="C",z=6.,a);

    a=51.996*g/mole;
    G4Element *elCr  = new G4Element(name="Chromium",symbol="Cr", z=24., a);

    a=54.938045*g/mole;
    G4Element *elMn = new G4Element(name="Manganese",symbol="Mn",z=25.,a);
    
    a=55.847*g/mole;
    G4Element *elFe  = new G4Element(name="Iron",symbol="Fe", z=26., a);

    a=58.69*g/mole;
    G4Element *elNi  = new G4Element(name="Nickel",symbol="Ni", z=28., a);

    a=95.96*g/mole;
    G4Element *elMo = new G4Element(name="Molybdenum",symbol="Mb",z=42.,a);

    //------------Stainless steel------------
    density = 8.0*g/cm3;
    /*
    G4Material *Steel = new G4Material(name="Steel",density,ncomponents=3);
    Steel->AddElement(elCr,fractionmass=18*perCent);
    Steel->AddElement(elFe,fractionmass=72*perCent);
    Steel->AddElement(elNi,fractionmass=10*perCent);
    */
    //"Steel" made of plastic so that menate_R will be able to work with it.
    //G4Material *Steel = new G4Material(name="Steel",density,ncomponents=2);
    //Steel->AddElement(elC,fractionmass=90*perCent);
    //Steel->AddElement(elH,fractionmass=10*perCent);

    //Steel is now made of Fe after addition of Fe into Menate_R (zwk)
    //Steel is mostly Fe, so this will work for the current time.
    G4Material *Steel = new G4Material(name="Steel",density,ncomponents=1);
    Steel->AddElement(elFe,fractionmass=100*perCent);

    //Defining the new sweeper -- really only a plate on the vault-side of the magnet to simulate neutrons that pass through that side before hitting MoNA (MoNA_prime or LISA really)
    //Dimensions of plate on side of sweeper
    //All numbers are from mechanical design drawings of sweeper and st mona (confirmed with rough measurements in the vault)
    G4double beamLineZ = 1055*mm;
    G4double beamLineX = 6.4*mm;
    G4double beamLineY = 600*mm; //totally made this one up because I can't find it in the drawings!)
    G4double halfbeamLineX = beamLineX/2;
    G4double halfbeamLineY = beamLineY/2;
    G4double halfbeamLineZ = beamLineZ/2;
    //Dimensions of neutron window plate
    G4double neutronWindowZ = 6.35*mm;
    G4double neutronWindowX = 556.7*mm;
    G4double neutronWindowY = 0.14*m; //taken from st mona and compared to rough measurement in vault
    G4double halfneutronWindowX = neutronWindowX/2;
    G4double halfneutronWindowY = neutronWindowY/2;
    G4double halfneutronWindowZ = neutronWindowZ/2;
    //Dimensions of magnet gap
    G4double gapZ = 1055*mm;
    G4double gapX = 556.7*mm;
    G4double gapY = 0.14*m;
    //G4double gapY = 180*mm; //testing making this bigger using number from Artemis's code -- no idea where she got it from!
    G4double halfgapZ = gapZ/2;
    G4double halfgapY = gapY/2;
    //G4double halfgapX = gapX/2;

    //*****zwk, doubling size of gapX because it is incorrect.  Neutron X-distribution is cutoff
    G4double halfgapX = 4*gapX/2;
    //******************************

    //Making a big steel box for the rest of the magnet
    G4double boxZ = 1055*mm; //make the same length as side of sweeper plate
    G4double boxX = 800*mm;
    G4double boxY = 1055*mm;
    G4double halfboxZ = boxZ/2;
    G4double halfboxX = boxX/2;
    G4double halfboxY = boxY/2;
    G4double gap_offset = (boxX - gapX);
    G4double halfGap_offset = (gap_offset/2);
    //TODO: shift in Z and X to put it in the correct position relative to the target!!!
    //Notes about placement -- neutron window should be 1.276 m from the target and should be centered around the target, plate on side of sweeper should end when neutron window starts
    G4double sweeperZshift = (1276 - gapZ)+halfgapZ;
    G4double sweeperXshift = -1*halfGap_offset;

    G4Box *sweeper = new G4Box("sweeper", halfboxX, halfboxY, halfboxZ);
    G4Box *Hole = new G4Box("StHole", halfgapX, halfgapY, halfgapZ);
    G4SubtractionSolid *magGap = new G4SubtractionSolid("magGap",sweeper,Hole,0,G4ThreeVector(gap_offset,0.*m,0.*m));
    G4Box *sidePanel = new G4Box("sidePanel", halfbeamLineX, halfbeamLineY, halfbeamLineZ);
    G4UnionSolid *mag = new G4UnionSolid("mag",magGap,sidePanel,G4Transform3D(G4RotationMatrix(),G4ThreeVector(halfboxX,0.*m,0.*m)));
    G4Box *nWindow = new G4Box("nWindow",halfneutronWindowX, halfneutronWindowY, halfneutronWindowZ);
    G4UnionSolid *fullSweeper = new G4UnionSolid("fullSweeper",mag,nWindow,G4Transform3D(G4RotationMatrix(),G4ThreeVector(gap_offset,0.*m,halfgapZ)));

    G4LogicalVolume *fullSweeper_log = new G4LogicalVolume(fullSweeper, Steel, "fullSweeper_log", 0,0,0);
    G4VPhysicalVolume *fullSweeper_phys = new G4PVPlacement(0,G4ThreeVector(sweeperXshift,0,sweeperZshift), fullSweeper_log, "fullSweep", World_log,false,0);
    
    ////////////////////////////
    // End Vault Construction //
    ////////////////////////////

    ///////////////////
    // Detector Loop //
    ///////////////////
    // Sensitive detector manager
    /*
    G4SDManager* SDman = G4SDManager::GetSDMpointer();
    G4String trackerChamberSDname = "ExN02/TrackerChamberSD";
    ExN02TrackerSD* aTrackerSD = new ExN02TrackerSD( trackerChamberSDname );
    SDman->AddNewDetector( aTrackerSD );
    logicChamber->SetSensitiveDetector( aTrackerSD );
    */
    // TODO: unify the names... some are singular, some are plural
    //Outside loop over arrays
    //G4cout << "I am gonna enter the detector creation loop\n";
    for (G4int i = 0; i < detectorInfo.size(); i++)
    {
        // Inside loop over layers
        //TODO: change to pointer... can you access these attributes like this?
        for (G4int j = 0; j < detectorInfo[i]->getLayers().size(); j++)
        {
            // Innermost loop over detectors
            for (G4int k = 0; k < detectorInfo[i]->getLayers()[j]->getDetectors().size(); k++)
            {
                Detector* currentDet = detectorInfo[i]->getLayers()[j]->getDetectors()[k];

                // the args needed here are a rotation matrix, position vector, logical volume,
                // name, the world volume its in
                //TODO: get the rotation matrix in
                //addPhysVol(new G4PVPlacement(currentDet->getRotation(),
                //            currentDet->getPosition(),
                //            currentDet->getLogVol(),currentDet->getName(),World_log,false,0));
                currentDet->addPhysVol(World_log);
            }
        }
    }

    //========================== Visualization attributes =========================================//
    World_log->SetVisAttributes(G4VisAttributes::Invisible);
    return World_phys;
}
